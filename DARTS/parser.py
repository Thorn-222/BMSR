import argparse

def str2bool(v):
  return v.lower() in ['t', 'true', True]

def get_parser():
  parser = argparse.ArgumentParser()
  # general settings
  parser.add_argument('--seed', type=int, default=104729)
  parser.add_argument('--gpu', type=str, default='2', help='set visible gpus')
  parser.add_argument('--model_name', type=str, default=None, help='select model [generator|predictor]')
  parser.add_argument('--save-path', type=str, default='results', help='the path of save directory')
  parser.add_argument('--data-path', type=str, default='data', help='the path of save directory')
  parser.add_argument('--save-epoch', type=int, default=20, help='how many epochs to wait each time to save model states')
  parser.add_argument('--max-epoch', type=int, default=400, help='number of epochs to train')
  parser.add_argument('--batch_size', type=int, default=32, help='batch size for generator') # 56
  parser.add_argument('--graph-data-name', default='nasbench201', help='graph dataset name')
  parser.add_argument('--nvt', type=int, default=7, help='number of different node types, 7: NAS-Bench-201 including in/out node')
  # graph encoder
  parser.add_argument('--hs', type=int, default=512, help='hidden size of GRUs') # 512
  parser.add_argument('--nz', type=int, default=1024, help='the number of dimensions of latent vectors z')
  # test
  parser.add_argument('--test', action='store_true', default=True, help='turn on test mode')
  parser.add_argument('--load-epoch', type=int, default=400, help='checkpoint epoch loaded for meta-test')
  parser.add_argument('--data-name', type=str, default='cifar10', help='meta-test dataset name')
  parser.add_argument('--num-class', type=int, default=None, help='the number of class of dataset') 
  parser.add_argument('--num-gen-arch', type=int, default=800, help='the number of candidate architectures generated by the generator') 
  parser.add_argument('--train-arch', type=str2bool, default=True, help='whether to train the searched architecture') 
  
  args = parser.parse_args()
  
  return args
